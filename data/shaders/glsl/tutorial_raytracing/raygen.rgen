#version 460

#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_ray_tracing : enable

#extension GL_ARB_shader_clock : enable

#extension GL_EXT_nonuniform_qualifier : enable

// This is needed to support buffer_reference extension
// We need buffer_reference to be able to store multiple Model structs
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "globals.glsl"
#include "math.glsl"
#include "sampling.glsl"
#include "rayTracingInputOutput.h"
#include "pathtracer.glsl"

void main() 
{
	const ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);
	const ivec2 imageSize = ivec2(gl_LaunchSizeEXT.xy);

	const uint seed = tea(imageCoords.y * gl_LaunchSizeEXT.x + imageCoords.x, int(clockARB()));
	payLoad.seed = seed;

	if (pushConstants.pathTracer > 0)
	{
		vec3 radiance = samplePixel(imageCoords, imageSize);

		vec4 valueToWrite = vec4(0,0,0,0);
		// do all computations at 32 bit resolution
		if (pushConstants.frameIndex > 0)
		{
			float a         = 1.0f / float(pushConstants.frameIndex + 1);
			vec3  oldColor = imageLoad(intermediateImage, imageCoords).xyz;

			valueToWrite = vec4(mix(oldColor, radiance, a), 1.f);
			imageStore(intermediateImage, imageCoords,valueToWrite );
		}
		else
		{
			valueToWrite = vec4(radiance, 0.0);
			imageStore(intermediateImage, imageCoords, valueToWrite);
		}

		// write the final value to the 8 bit resolution after tonemapping, etc
		float one_by_gamma = 1.0/2.2f;
		valueToWrite = pow(valueToWrite, vec4(one_by_gamma));
		imageStore(finalImage, imageCoords, valueToWrite);
	}
	else
	{
		vec3 radiance = samplePixel2(imageCoords, imageSize);
		imageStore(finalImage, imageCoords, vec4(radiance, 0.0));
	}
}
